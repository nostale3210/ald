#!/usr/bin/env bash


pprint() {
    echo "$1"  > "$locsync"
}


trap clean_draw 0


clean_draw() {
    echo ""  > "$locsync"
    sleep 0.2
    kill "$(jobs -p)" 2>/dev/null
    rm "$locsync" &>/dev/null
    printf "\e[?25h\n"
    return 0
}


draw_bar() {
    printf "\e[?25l"
    local locsync="$1"
    while true; do
        while [[ -z "$(cat "$locsync")" ]]; do sleep 1; done
        printf "[" && printf -- "-%.0s" $(seq 1 50) && printf "] %s\r" "$(cat "$locsync")"
        sleep 0.1
        for i in {1..10}; do
            printf "[" && printf "=%.0s" $(seq 1 "$i") &&
                printf -- "-%.0s" $(seq "$((i+1))" 50) && printf "] %s\r" "$(cat "$locsync")"
            sleep 0.1
        done
        while [[ -n "$(cat "$locsync")" ]]; do
            for i in {1..39}; do
                printf "[" && printf -- "-%.0s" $(seq 1 "$i") &&
                    printf "=%.0s" $(seq 1 10) && printf -- "-%.0s" $(seq "$((i+11))" 50) &&
                    printf "] %s\r" "$(cat "$locsync")"
                sleep 0.1
                if [[ -z "$(cat "$locsync")" ]]; then break 2; fi
            done
            printf "[" && printf -- "-%.0s" $(seq 1 40) &&
                printf "=%.0s" $(seq 1 10) && printf "] %s\r" "$(cat "$locsync")"
            sleep 0.1
            for i in {1..9}; do
                printf "[" && printf "=%.0s" $(seq 1 "$i") &&
                    printf -- "-%.0s" $(seq 10 49) &&
                    printf "=%.0s" $(seq "$i" 9) && printf "] %s\r" "$(cat "$locsync")"
                sleep 0.1
                if [[ -z "$(cat "$locsync")" ]]; then break 2; fi
            done
            printf "\e[2K[" && printf "=%.0s" $(seq 1 10) &&
                printf -- "-%.0s" $(seq 1 40) && printf "] %s\r" "$(cat "$locsync")"
            sleep 0.1
        done
        printf "\e[2K[" && printf "=%.0s" $(seq 1 50) && printf "] %s\r" "$(cat "$locsync")"
        sleep 0.1
    done
}


print_help() {
    printf "\033[1m\033[4mALD\033[24m\tApply & manage container image based os deployments\033[0m\n\n"
    printf "\033[1mUsage:\033[0m\tald SUBCOMMAND [OPTIONS]... [ARGUMENTS]...\n\n"
    printf "\033[1mSubcommands:\033[0m\n"
    printf "\thelp\t\tPrint this menu\n"
    printf "\tstatus\t\tPrint active and available deployments and their versions\n"
    printf "\tpull\t\tPull the newest version of the upstream container image, if a new version is available\n"
    printf "\tswap\t\tReplace the currently active deployment with another specified, available one\n"
    printf "\trm\t\tRemove a specified, available deployment\n"
    printf "\tgc\t\tRemove old deployments until only n=KEEP_DEPS remain\n"

    printf "\tdep\t\tDeploy new versions\n"
    printf "\t\t\tOptions:\n"
    printf "\t\t\t\t-u\tPull newest image before deploying\n"
    printf "\t\t\t\t\t(Same as \`ald pull\`)\n"
    printf "\t\t\t\t-s\tSwap to the new deployment immediately after building\n"
    printf "\t\t\t\t\t(Same as \`ald swap DEPLOYMENT\`)\n"
    printf "\t\t\t\t-g\tTrigger gc after deploying\n"
    printf "\t\t\t\t\t(Same as \`ald gc\`)\n"
    printf "\t\t\t\t-z\tRelabel files according to the new deployment's selinux policy\n"

    printf "\tinit\t\tInitialise ALD on a system\n"
    printf "\t\t\tOptions:\n"
    printf "\t\t\t\t-b\tBuild the local Containerfile before initialising\n"
    printf "\t\t\t\t\tCurrently required for the local image to be used\n"
    printf "\t\t\t\t\t(Same as \`ald build\`)\n"
    printf "\t\t\t\t-z\tRelabel files according to the new deployment's selinux policy\n"
    printf "\t\t\t\t--ex\tUse a customised %s,\n\t\t\t\t\tit will be used instead of an automatically generated entry\n" "${ALD_PATH:?}/boot.conf.ex"

    printf "\tself-update\tUpdate ALD and static binaries\n"
    printf "\t\t\tOptions:\n"
    printf "\t\t\t\t-f\tSkip update check\n"

    printf "\tbootloader_update\tUpdate the system's bootloader\n"
    printf "\t\t\tOptions (one is required):\n"
    printf "\t\t\t\t--fg\tUpdate grub on fedora x86_64 systems\n"
}


print_status() {
    read -ra available_deployments <<< "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" | awk -F'/' '{print $NF}' | sort -nr | tr "\n" " ")"
    depl_version="$(grep ^VERSION= < "/usr/lib/os-release" | cut -d'=' -f2)"
    depl_name="$(grep ^NAME= < "/usr/lib/os-release" | cut -d'=' -f2)"
    printf "\033[1mCurrently active deployment:\033[0m\n\n"
    printf "\t\033[1m\033[4m%s\033[0m\t\u2500\u2500\u2500\tName: %s\n" "$(cat "${ALD_PATH:?}/current")" "$depl_name"
    printf "\t\t\tVersion: %s\n" "$depl_version"
    printf "\t\t\tKernel: \"%s\"\n\n\n" "$(find "/usr/lib/modules" -maxdepth 1 -type d | sort | tail -n1 | awk -F'/' '{ print $NF }')"
    printf "\033[1mOther available deployments:\033[0m\n\n"
    for depl in "${available_deployments[@]}"; do
        depl_version="$(grep ^VERSION= < "${ALD_PATH:?}/$depl/usr/lib/os-release" | cut -d'=' -f2)"
        depl_name="$(grep ^NAME= < "${ALD_PATH:?}/$depl/usr/lib/os-release" | cut -d'=' -f2)"
        printf "\t\033[1m%s\033[0m\t\u2500\u2500\u2500\tName: %s\n" "$depl" "$depl_name"
        printf "\t\t\tVersion: %s\n" "$depl_version"
        printf "\t\t\tKernel: \"%s\"\n\n" "$(find "${ALD_PATH:?}/$depl/usr/lib/modules" -maxdepth 1 -type d | sort | tail -n1 | awk -F'/' '{ print $NF }')"
    done
}


fail_ex() {
    printf "\n\033[31;1mCritical Failure!\033[0m\n%s\n\n" "$2"
    if [[ ! "$(cat "${ALD_PATH:?}/current")" == "$1" && ! "$1" == "-1" ]]; then
        pprint "Attempting cleanup..."
        podman rm ald-tmp &>/dev/null
        podman rm ald-utils &>/dev/null
        podman rm ald-boot &>/dev/null
        rm -rf "${ALD_PATH:?}/${1:?}"
        chattr -f -i "${ALD_PATH:?}/init/$1.sh"
        rm -rf "${ALD_PATH:?}/init/${1:?}.sh"
        rm -rf "${BOOT_PATH:?}/${1:?}"
        rm -rf "${BOOT_PATH:?}/loader/entries/${1:?}.conf"
    fi
    mountpoint /usr &>/dev/null || mount -o bind,ro /usr /usr
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null || mount -o bind,ro {} {} &>/dev/null' \;
    dissolve_chroot
    exit 1
}


pull_image() {
    pprint "Checking for updates..."
    installed_image="$(podman inspect --format '{{.Digest}}' "$SOURCE_IMAGE" 2>/dev/null)"
    remote_image="$(skopeo inspect --format '{{.Digest}}' "docker://$SOURCE_IMAGE" 2>/dev/null)"
    if [[ "$installed_image" == "$remote_image" ]]; then
        printf "Latest image already pulled.\nIf the invoked command was \`ald dep\` omit \"-u\" to create a new deployment anyways.\n"
        exit 0
    else
        pprint "Pulling $SOURCE_IMAGE..."
        if [[ "$tput_support" == "y" ]]; then echo ""  > "$locsync" && tput smcup; fi
        podman pull "$SOURCE_IMAGE" || fail_ex "-1" "Pulling image failed."
        if [[ "$tput_support" == "y" ]]; then tput rmcup; fi
    fi
}


setup_chroot() {
    mount -t proc /proc "${ALD_PATH:?}/image/proc" || return 1
    mount -t sysfs /sys "${ALD_PATH:?}/image/sys" || return 1
    mount -t tmpfs ald_tmp "${ALD_PATH:?}/image/tmp" || return 1

    mount -t overlay usr_overlay -o lowerdir="${ALD_PATH:?}/image/usr",upperdir="${ALD_PATH:?}/user/usr",workdir="${ALD_PATH:?}/user/.usr_work" "${ALD_PATH:?}/image/usr" || return 1
    mount -t overlay etc_overlay -o lowerdir="${ALD_PATH:?}/image/etc",upperdir="${ALD_PATH:?}/user/etc",workdir="${ALD_PATH:?}/user/.etc_work" "${ALD_PATH:?}/image/etc" || return 1
}


dissolve_chroot() {
    for dir in "${ALD_PATH:?}/image/"*/; do
        umount -f "$dir" &>/dev/null
    done
}


build_image() {
    next_id="$1"

    pprint "Building local image..."
    if [[ ! -d "${ALD_PATH:?}/user/usr" ]]; then
        mkdir -p "${ALD_PATH:?}/user/"{usr,etc,.usr_work,.etc_work}
    fi
    if [[ ! -L "${ALD_PATH:?}/image/bin" ]]; then
        mkdir -p "${ALD_PATH:?}/image/"{dev,proc,sys,tmp}
        ln -sfr "${ALD_PATH:?}/image/usr/bin" "${ALD_PATH:?}/image/bin"
        ln -sfr "${ALD_PATH:?}/image/usr/lib" "${ALD_PATH:?}/image/lib"
        ln -sfr "${ALD_PATH:?}/image/usr/lib64" "${ALD_PATH:?}/image/lib64"
        ln -sfr "${ALD_PATH:?}/image/usr/sbin" "${ALD_PATH:?}/image/sbin"
    fi
    if [[ ! -f "${ALD_PATH:?}/setup_script" ]]; then
        cat > "${ALD_PATH:?}/setup_script" << EOF
#!/usr/bin/env bash
set -oue pipefail

### Customizations go below
EOF
    fi

    rm -rf "${ALD_PATH:?}/user/etc/resolv.conf"
    cat /etc/resolv.conf > "${ALD_PATH:?}/user/etc/resolv.conf"

    setup_chroot

    pprint "Syncing system configuration..."
    if [[ "$STATE" == "drop" ]]; then
        reset_state "$next_id"
    else
        rsync -alHcx --exclude "resolv.conf" --delete /etc "${ALD_PATH:?}/image" || fail_ex "$next_id" "Couldn't place system config."
    fi
    podman cp ald-tmp:/etc/passwd "${ALD_PATH:?}" || fail_ex "$next_id" "Couldn't place system config."
    podman cp ald-tmp:/etc/shadow "${ALD_PATH:?}" || fail_ex "$next_id" "Couldn't place system config."

    echo ""  > "$locsync"
    cp "${ALD_PATH:?}/setup_script" "${ALD_PATH:?}/image/setup_script"
    chmod +x "${ALD_PATH:?}/image/setup_script"
    if [[ "$tput_support" == "y" ]]; then echo ""  > "$locsync" && tput smcup; fi
    chroot "${ALD_PATH:?}/image" /usr/bin/bash -c /setup_script
    if [[ "$tput_support" == "y" ]]; then tput rmcup; fi
    rm -f "${ALD_PATH:?}/image/setup_script"

    sort /etc/passwd "${ALD_PATH:?}/passwd" | awk -F':' '!a[$1]++' > "$ALD_PATH/user/etc/passwd" || fail_ex "$next_id" "Couldn't place system config."
    sort /etc/shadow "${ALD_PATH:?}/shadow" | awk -F':' '!a[$1]++' > "$ALD_PATH/user/etc/shadow" || fail_ex "$next_id" "Couldn't place system config."
    rm "${ALD_PATH:?}"/{passwd,shadow} || fail_ex "$next_id" "Couldn't place system config."
}


setup_dep() {
    shift

    pprint "Retrieving vars..."
    current_id="$(cat "${ALD_PATH:?}/current")"
    max_id="$(find "${ALD_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" | awk -F'/' '{print $NF}' | sort -n | tail -n1)"
    max_id="$(echo "$current_id" "$max_id" | tr " " "\n" | sort -n | tail -n1)"
    next_id="$((max_id+1))"

    trap 'fail_ex $next_id "Failed to create deployment."' INT TERM

    if [[ "$*" == "-"*"u"* ]]; then pull_image; fi

    pprint "Unlocking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null && umount -f {} {} &>/dev/null' \;

    pprint "Syncing image root to fs..."
    podman create --name ald-tmp "$SOURCE_IMAGE" &>/dev/null || fail_ex "$next_id" "Couldn't sync files."
    MOUNTC="$(podman mount ald-tmp)"
    mkdir -p "${ALD_PATH:?}/image"
    rsync -aHlcx --delete "$MOUNTC"/{usr,etc} "${ALD_PATH:?}/image" || fail_ex "$next_id" "Couldn't sync files."
    rsync -aHlx "$MOUNTC"/usr/etc/ "${ALD_PATH:?}/image/etc/" &>/dev/null
    podman unmount ald-tmp &>/dev/null || printf "Temporary container still mounted!\n"

    build_image "$next_id"

    pprint "Creating directories..."
    mkdir -p "${ALD_PATH:?}/$next_id/usr" || fail_ex "$next_id" "Couldn't create deployment root."
    mkdir -p "${ALD_PATH:?}/init" || fail_ex "$next_id" "Couldn't create init directory."
    mkdir -p "${BOOT_PATH:?}/$next_id" || fail_ex "$next_id" "Couldn't create deployment boot directory."

    dissolve_chroot

    pprint "Creating deployment $next_id..."
    rsync -aHlx --link-dest="${ALD_PATH:?}/image/usr/" "${ALD_PATH:?}/image/usr/" "${ALD_PATH:?}/$next_id/usr/" || fail_ex "$next_id" "Couldn't sync files."
    rsync -aHIlx --link-dest="${ALD_PATH:?}/user/usr/" "${ALD_PATH:?}/user/usr/" "${ALD_PATH:?}/$next_id/usr/" || fail_ex "$next_id" "Couldn't sync files."
    rsync -aHlx "${ALD_PATH:?}/image/etc" "${ALD_PATH:?}/$next_id" || fail_ex "$next_id" "Couldn't sync files."
    rsync -aHIlx "${ALD_PATH:?}/user/etc" "${ALD_PATH:?}/$next_id" || fail_ex "$next_id" "Couldn't sync files."
    ln -s "${ALD_PATH:?}/ald" "$ALD_PATH/$next_id/usr/bin/ald"

    podman rm ald-tmp &>/dev/null || fail_ex "$next_id" "Couldn't remove temporary container."

    pprint "Preparing boot entry..."
    new_kernel="$(find "${ALD_PATH:?}/$next_id/usr/lib/modules" -name vmlinuz | sort | tail -n1)" || fail_ex "$next_id" "Couldn't place new kernel."
    new_init="$(find "${ALD_PATH:?}/$next_id/usr/lib/modules" -name initramfs.img | sort | tail -n1)" || fail_ex "$next_id" "Couldn't place new initramfs."
    cp -rfa "$new_kernel" "${BOOT_PATH:?}/$next_id" || fail_ex "$next_id" "Couldn't place new kernel."
    cp -rfa "$new_init" "${BOOT_PATH:?}/$next_id" || fail_ex "$next_id" "Couldn't place new initramfs."

    deduplicate_boot_files

    if [[ "$*" == "-"*"z"* ]]; then apply_selinux_policy "$next_id"; fi
    if [[ "$*" == "-"*"s"* ]]; then swap_deployment "$next_id"; fi
    if [[ "$*" == "-"*"g"* ]]; then rm_deps; fi

    cp -rfa "${ALD_PATH:?}$BOOT_PATH.conf" "${BOOT_PATH:?}/loader/entries/$next_id.conf" || fail_ex "$next_id" "Couldn't place boot config."
    cp -rfa "${ALD_PATH:?}/init/init.sh" "$ALD_PATH/init/$next_id.sh" || fail_ex "$next_id" "Couldn't place init script."
    chmod +x "${ALD_PATH:?}/init/$next_id.sh" || fail_ex "$next_id" "Couldn't place init script."

    sed -i "s@INSERT_DEPLOYMENT@$next_id@g" "${ALD_PATH:?}/init/$next_id.sh" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@ALD_PATH@$ALD_PATH@g" "${ALD_PATH:?}/init/$next_id.sh" || fail_ex "$next_id" "Placing template files for $ID failed."
    chattr -f +i "${ALD_PATH:?}/init/$next_id.sh" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@INSERT_DEPLOYMENT@$next_id@g" "${BOOT_PATH:?}/loader/entries/$next_id.conf" || fail_ex "$next_id" "Placing template files for $ID failed."
    sed -i "s@ALD_PATH@$ALD_PATH@g" "${BOOT_PATH:?}/loader/entries/$next_id.conf" || fail_ex "$next_id" "Placing template files for $ID failed."

    pprint "Deployment $next_id installed!"

    pprint "Locking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null || mount -o bind,ro {} {} &>/dev/null' \;
}


show_updates() {
    rpm --version &>/dev/null || fail_ex "-1" "Currently only rpm-based systems are supported."
    if [[ "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -printf "%P ")" != *"$1"* && "$1" != "$(cat "${ALD_PATH:?}"/current)" ]]; then
        fail_ex "-1" "No such deployment: $1."
    elif [[ "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -printf "%P ")" != *"$2"* && "$2" != "$(cat "${ALD_PATH:?}"/current)" ]]; then
        fail_ex "-1" "No such deployment: $2."
    fi
    FALLBACK="$(find "${ALD_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" | awk -F'/' '{print $NF}' | sort -n | tail -n1)"
    if [[ -n "$1" && "$1" != "$(cat "${ALD_PATH:?}/current")" ]]; then OLD_DEP="${ALD_PATH:?}/$1"; else OLD_DEP="${ALD_PATH:?}/$FALLBACK"; fi
    if [[ -n "$2" && "$2" != "$(cat "${ALD_PATH:?}/current")" ]]; then NEW_DEP="${ALD_PATH:?}/$2"; else NEW_DEP="/"; fi
    printf "Comparing %s and %s:\n" "$OLD_DEP" "$NEW_DEP"
    rpm -qa --root="$OLD_DEP" | sort > "$HOME/.old" || (rm "$HOME/.old" && fail_ex "-1" "Couldn't retrieve packages from $OLD_DEP.")
    rpm -qa --root="$NEW_DEP" | sort > "$HOME/.new" || (rm "$HOME/"{.old,.new} && fail_ex "-1" "Couldn't retrieve packages from $NEW_DEP.")
    diff -y "$HOME/.old" "$HOME/.new" | grep "|\|>\|<" || pprint "There doesn't seem to be a difference bewteen $OLD_DEP and $NEW_DEP."
    rm "$HOME/"{.old,.new} || printf "Failed to delete temporary files.\n"
}


swap_deployment() {
    if [[ "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -printf "%P ")" != *"$1"* || -z $1 ]]; then
        fail_ex "-1" "Deployment $1 doesn't exist or can't be swapped to."
    fi
    pprint "Unlocking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null && umount -f {} {} &>/dev/null' \;
    pprint "Replacing deployment $(cat "${ALD_PATH:?}/current") with $1."
    chattr -i / || fail_ex "-1" "Couldn't unlock /."
    (mountpoint /usr &>/dev/null && umount -l /usr) || fail_ex "-1" "Couldn't temporarily remove /usr bind mount."
    exch /usr "${ALD_PATH:?}/$1/usr" || fail_ex "-1" "Couldn't atomically switch deployments."  
    exch /etc "${ALD_PATH:?}/$1/etc" || printf "Couldn't atomically switch system config, system might be instable."
    mount -o bind,ro /usr /usr || printf "Restoring /usr bind mount failed, fs is rw."
    chattr +i / || printf "Couldn't lock /.\n"
    mv "${ALD_PATH:?}/$1" "$ALD_PATH/$(cat "$ALD_PATH/current")" || printf "Renaming old deployment failed, naming out of sync."
    echo "$1" > "${ALD_PATH:?}/current" || printf "Saving new deployment failed, naming out of sync."
    systemctl daemon-reexec || printf "Couldn't reexec systemd, system might behave weirdly."
    for user in $(users | awk '{ print $1 }'); do
        sudo -u "$user" env DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$user")"/bus systemctl --user daemon-reexec || printf "Couldn't reexec systemd, system might behave weirdly."
    done
    pprint "Locking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null || mount -o bind,ro {} {} &>/dev/null' \;
}


reset_state() {
    pprint "Syncing absolutely required config..."
    rm -rf "${ALD_PATH:?}/user/etc" || fail_ex "$1" "Resetting /etc failed."
    cp -rfa --parents /etc/fstab /etc/crypttab /etc/locale.conf /etc/localtime /etc/adjtime \
        /etc/sudoers.d /etc/group /etc/gshadow /etc/subgid /etc/subuid \
        /etc/NetworkManager/system-connections /etc/vconsole.conf /etc/pki \
        /etc/firewalld /etc/environment /etc/hostname \
        /etc/X11/xorg.conf.d/00-keyboard.conf /etc/sudoers \
        "${ALD_PATH:?}/user/" || fail_ex "$1" "Resetting /etc failed."
}


apply_selinux_policy() {
    pprint "Relabeling deployment $1..."
    restorecon -RF "${BOOT_PATH:?}"
    setfiles -r "${ALD_PATH:?}/$1" "${ALD_PATH:?}/$1/etc/selinux/targeted/contexts/files/file_contexts" "${ALD_PATH:?}/$1" &>/dev/null
}


deduplicate_boot_files() {
    pprint "Deduplicating inactive deployments..."
    read -ra available_boot_files <<< "$(find "${BOOT_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" -not -path "${BOOT_PATH:?}/$(cat "${ALD_PATH:?}"/current)" | tr "\n" " ")"
    if [[ "$tput_support" == "y" ]]; then echo ""  > "$locsync" && tput smcup; fi
        hardlink -tXOv -s1 "${available_boot_files[@]}"
    if [[ "$tput_support" == "y" ]]; then tput rmcup; fi
    echo ""  > "$locsync"
}


rm_dep() {
    pprint "Unlocking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null && umount -f {} {} &>/dev/null' \;
    chattr -f -i "${ALD_PATH:?}/init/$1.sh"
    pprint "Removing deployment $1..."
    if [[ "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -printf "%P ")" != *"$1"* || -z $1 ]]; then
        fail_ex "-1" "Deployment $1 doesn't exist or isn't removable."
    fi
    podman rm ald-tmp &>/dev/null
    rm -rf "${ALD_PATH:?}/$1" || printf "Removing %s failed, manual intervention might be necessary.\n" "$ALD_PATH/$1"
    rm -rf "${ALD_PATH:?}/init/$1.sh" || printf "Removing %s failed, manual intervention might be necessary.\n" "$ALD_PATH/init/$1.sh" 
    rm -rf "${BOOT_PATH:?}/$1" || printf "Removing %s failed, manual intervention might be necessary.\n" "$BOOT_PATH/$1"
    rm -rf "${BOOT_PATH:?}/loader/entries/$1.conf" || printf "Removing %s failed, manual intervention might be necessary.\n" "$BOOT_PATH/loader/entries/$1.conf"
    mountpoint /usr &>/dev/null || mount -o bind,ro /usr /usr
    pprint "Locking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null || mount -o bind,ro {} {} &>/dev/null' \;
}


rm_deps() {
    while [[ "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" | awk -F'/' '{print $NF}' | sort -nr | wc -l)" -gt "$((KEEP_DEPS-1))" ]]; do
        rm_dep "$(find "${ALD_PATH:?}" -maxdepth 1 -type d -name "[0-9]*" | awk -F'/' '{print $NF}' | sort -n | head -n1)"
    done
}


init_ald() {
    shift

    ln -s "${ALD_PATH:?}/ald" /usr/bin/ald
    mkdir -p "${ALD_PATH:?}/init/safe"
    mkdir -p /var/usrlocal
    echo "0" > "${ALD_PATH:?}/current"
    mv "${ALD_PATH:?}"/init.sh "$ALD_PATH/init/"
    mv "${ALD_PATH:?}"/{busybox,exch} "$ALD_PATH/init/safe/"
    chattr -f +i "${ALD_PATH:?}/init/init.sh"
    chattr -f +i "${ALD_PATH:?}/init/safe/exch"
    chattr -f +i "${ALD_PATH:?}/init/safe/busybox"
    boot_conf="$(find "${BOOT_PATH:?}/loader/entries" | sort | tail -n1)"
    if [[ "$*" == *"--ex"* ]]; then
        mv -f "${ALD_PATH:?}/boot.conf.ex" "${ALD_PATH:?}/boot.conf"
    else
        cp -fa "$boot_conf" "${ALD_PATH:?}/boot.conf" || fail_ex "-1" "Automatic boot entry creation failed."
        (grep -q title "${ALD_PATH:?}/boot.conf" && sed -i "s/^title .*$/title ALD Deployment INSERT_DEPLOYMENT/g" "${ALD_PATH:?}/boot.conf") || fail_ex "-1" "Automatic boot entry creation failed."
        (grep -q version "${ALD_PATH:?}/boot.conf" && sed -i "s/^version .*$/version INSERT_DEPLOYMENT/g" "${ALD_PATH:?}/boot.conf") || fail_ex "-1" "Automatic boot entry creation failed."
        (grep -q linux "${ALD_PATH:?}/boot.conf" && sed -i "s/^linux .*$/linux \/INSERT_DEPLOYMENT\/vmlinuz/g" "${ALD_PATH:?}/boot.conf") || fail_ex "-1" "Automatic boot entry creation failed."
        (grep -q initrd "${ALD_PATH:?}/boot.conf" && sed -i "s/^initrd .*$/initrd \/INSERT_DEPLOYMENT\/initramfs.img/g" "${ALD_PATH:?}/boot.conf") || fail_ex "-1" "Automatic boot entry creation failed."
        (grep -q options "${ALD_PATH:?}/boot.conf" && sed -i "s/^options \(.*\)$/options \1 init=ALD_PATH\/init\/INSERT_DEPLOYMENT.sh/g" "${ALD_PATH:?}/boot.conf") || fail_ex "-1" "Automatic boot entry creation failed."
    fi

    if [[ "$*" == "-"*"b"* ]]; then build_image && SOURCE_IMAGE="$LOCAL_TAG"; fi
    STATE="drop"
    setup_dep
    if [[ "$*" == "-"*"z"* ]]; then apply_selinux_policy "1"; fi

    pprint "ALD initialised. Rebooting once is needed after initializing/switching image."
}


update_ald() {
    pprint "Initiating self-update..."
    SOURCE_IMAGE="ghcr.io/nostale3210/ald-utils:latest"
    if [[ "$*" != "-"*"f"* ]]; then pull_image "1"; fi
    pprint "Unlocking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null && umount -f {} {} &>/dev/null' \;

    pprint "Retrieving updated files..."
    podman create --name ald-utils "$SOURCE_IMAGE" &>/dev/null || fail_ex "-1" "Couldn't sync files."
    podman cp ald-utils:/ald/ald "${ALD_PATH:?}/ald.bak" || fail_ex "-1" "Couldn't sync files."
    podman cp ald-utils:/ald/init.sh "${ALD_PATH:?}/init.bak" || fail_ex "-1" "Couldn't sync files."
    podman cp ald-utils:/ald/exch "${ALD_PATH:?}/exch.bak" || fail_ex "-1" "Couldn't sync files."
    podman cp ald-utils:/ald/busybox "${ALD_PATH:?}/busybox.bak" || fail_ex "-1" "Couldn't sync files."
    podman rm ald-utils &>/dev/null

    pprint "Attempting to replace files atomically..."
    chattr -f -i "${ALD_PATH:?}/init/init.sh"
    chattr -f -i "${ALD_PATH:?}/init/safe/exch"
    chattr -f -i "${ALD_PATH:?}/init/safe/busybox"
    touch "${ALD_PATH:?}/init/safe"/{exch,busybox} &>/dev/null || true
    exch "${ALD_PATH:?}/init.bak" "${ALD_PATH:?}/init/init.sh" || printf "init.sh couldn't be updated"
    exch "${ALD_PATH:?}/exch.bak" "${ALD_PATH:?}/init/safe/exch" || printf "exch couldn't be updated"
    exch "${ALD_PATH:?}/busybox.bak" "${ALD_PATH:?}/init/safe/busybox" || printf "busybox couldn't be updated"
    exch "${ALD_PATH:?}/ald.bak" "${ALD_PATH:?}/ald" || printf "ald couldn't be updated"
    chattr -f +i "${ALD_PATH:?}/init/init.sh"
    chattr -f +i "${ALD_PATH:?}/init/safe/exch"
    chattr -f +i "${ALD_PATH:?}/init/safe/busybox"
    rm "${ALD_PATH:?}"/{ald.bak,init.bak,exch.bak,busybox.bak}

    pprint "Locking image storage..."
    find "${ALD_PATH:?}" -mindepth 2 -maxdepth 2 -type d -name "usr" -exec bash -c 'mountpoint {} &>/dev/null || mount -o bind,ro {} {} &>/dev/null' \;

    pprint "Self-update finished"
}


update_bootloader() {
    if [[ "$*" == *"--fg"* ]]; then
        fedora_grub
    else
        printf "No bootloader seems to be available for this configuration."
    fi
}


fedora_grub() {
    mkdir "${ALD_PATH:?}/tmp-boot"
    cat > "${ALD_PATH:?}/tmp-boot/Containerfile" << EOF
FROM "${SOURCE_IMAGE}"

RUN (sudo dnf5 reinstall -y grub2-efi-x64.x86_64 || sudo dnf5 install -y grub2-efi-x64.x86_64) || (echo "Couldn't install grub!" && exit 1)

RUN (dnf5 reinstall -y shim-x64.x86_64 || sudo dnf5 install -y shim-x64.x86_64) || (echo "Couldn't install shim!" && exit 1)
EOF
    podman build -t localhost/ald-boot "${ALD_PATH:?}/tmp-boot" || fail_ex "-1" "Couldn't create image."
    podman create --name ald-boot localhost/ald-boot &>/dev/null || fail_ex "-1" "Couldn't sync files."

    if [[ "$?" != "0" ]]; then fail_ex "-1" "Failed to fetch bootloader components."; fi
    podman cp ald-boot:/boot/efi/EFI/fedora/shimx64.efi "${EFI_PATH:?}" ||
        fail_ex "-1" "Failed to retrieve bootloader components."
    podman cp ald-boot:/boot/efi/EFI/fedora/grubx64.efi "${EFI_PATH:?}" ||
        fail_ex "-1" "Failed to retrieve bootloader components."
    podman cp ald-boot:/boot/efi/EFI/fedora/mmx64.efi "${EFI_PATH:?}" ||
        fail_ex "-1" "Failed to retrieve bootloader components."
    podman cp ald-boot:/boot/efi/EFI/fedora/BOOTX64.CSV "${EFI_PATH:?}" ||
        fail_ex "-1" "Failed to retrieve bootloader components."
    podman cp ald-boot:/boot/efi/EFI/BOOT/fbx64.efi "${EFI_PATH:?}" ||
        fail_ex "-1" "Failed to retrieve bootloader components."

    pprint "Updating shim..."
    cp "${EFI_PATH:?}/shimx64.efi" "${EFI_PATH:?}/shimx64.efi.bak" ||
        fail_ex "-1" "Failed to prepare bootloader components."
    cp "${EFI_PATH:?}/shimx64.efi" "${EFI_PATH:?}/shimx64.efi.bak.bak" ||
        fail_ex "-1" "Failed to prepare bootloader components."
    exch "${EFI_PATH:?}/shimx64.efi" "${EFI_PATH:?}/EFI/BOOT/BOOTX64.EFI" ||
        fail_ex "-1" "Failed to place bootloader components."
    exch "${EFI_PATH:?}/shimx64.efi.bak" "${EFI_PATH:?}/EFI/fedora/shim.efi" ||
        printf "Failed to place bootloader components.\n"
    exch "${EFI_PATH:?}/shimx64.efi.bak.bak" "${EFI_PATH:?}/EFI/fedora/shimx64.efi" ||
        printf "Failed to place bootloader components.\n"
    rm "${EFI_PATH:?}"/{shimx64.efi,shimx64.efi.bak,shimx64.efi.bak.bak} ||
        printf "Failed to cleanup bootloader components.\n"

    pprint "Updating grub..."
    exch "${EFI_PATH:?}/grubx64.efi" "${EFI_PATH:?}/EFI/fedora/grubx64.efi" ||
        printf "Failed to place bootloader components.\n"
    exch "${EFI_PATH:?}/mmx64.efi" "${EFI_PATH:?}/EFI/fedora/mmx64.efi" ||
        printf "Failed to place bootloader components.\n"
    exch "${EFI_PATH:?}/BOOTX64.CSV" "${EFI_PATH:?}/EFI/fedora/BOOTX64.CSV" ||
        printf "Failed to place bootloader components.\n"
    exch "${EFI_PATH:?}/fbx64.efi" "${EFI_PATH:?}/EFI/BOOT/fbx64.efi" ||
        printf "Failed to place bootloader components.\n"
    rm "${EFI_PATH:?}"/{grubx64.efi,mmx64.efi,BOOTX64.CSV,fbx64.efi} ||
        printf "Failed to cleanup bootloader components.\n"

    podman rm ald-boot &>/dev/null || printf "Failed to remove container ald-boot.\n"
    podman rmi localhost/ald-boot &>/dev/null || printf "Failed to remove image localhost/ald-boot.\n"
    rm -rf "${ALD_PATH:?}/tmp-boot" &>/dev/null
    pprint "Update complete!\n"
}


source "$(dirname "$(readlink -f "$0")")/ald-config.sh" &>/dev/null || printf "No config found, using defaults...\n"


SOURCE_IMAGE="${SOURCE_IMAGE:-ghcr.io/nostale3210/timesinkc-main:latest}"
LOCAL_TAG="${LOCAL_TAG:-localhost/ald-root}"
ALD_PATH="${ALD_PATH:-/var/deployments}"
BOOT_PATH="${BOOT_PATH:-/boot}"
EFI_PATH="${EFI_PATH:-$BOOT_PATH/efi}"
STATE="${ALD_STATE:-keep}"
KEEP_DEPS="${KEEP_DEPS:-4}"

if ! podman --version &>/dev/null || ! rsync --version &>/dev/null; then
    fail_ex "-1" "Dependency check failed! Are podman and rsync installed?"
fi

if (infocmp 2>/dev/null | grep -q smcup) &&
    (infocmp 2>/dev/null | grep -q rmcup);
then tput_support="y";
else tput_support="n"; fi

locsync="/dev/shm/sync$$"
echo ""  > "$locsync"
draw_bar "$locsync" &

declare -A -r RUN_CMD=(
    ["build"]="lwPOgI3J0zn6q"
    ["pull"]="SPRjLFOXJvXt7"
    ["swap"]="NJsoQnUMHEfpe"
    ["dep"]="nQ8tKSuA0SJoy"
    ["rm"]="ONK3quF6NgVfC"
    ["gc"]="fM2KhAo1Ko0Pk"
    ["init"]="YhOp7NCvu2blO"
    ["dedupe"]="29UtiseMD5Vji"
    ["self-update"]="QUd1eE2e8cEdn"
    ["bootloader-update"]="QjPZu7VH36P6n"
)

if [[ "$(id -u)" != "0" ]]; then
    case "$1" in
        help)
            print_help
            ;;
        status)
            print_status
            ;;
        diff)
            show_updates "${2-}" "${3-}"
            ;;
        *)
            printf "\033[31;1mThis program needs to be ran as root.\nMore info:\033[0m\n\n"
            print_help
            exit 1
            ;;
    esac
elif [[ "$(id -u)" = "0" && "${!RUN_CMD[*]}" != *"$1"* ]]; then
    case "$1" in
        lwPOgI3J0zn6q)
            build_image
            ;;
        SPRjLFOXJvXt7)
            pull_image
            ;;
        NJsoQnUMHEfpe)
            swap_deployment "$2"
            ;;
        nQ8tKSuA0SJoy)
            setup_dep "$@"
            ;;
        ONK3quF6NgVfC)
            rm_dep "$2"
            ;;
        YhOp7NCvu2blO)
            init_ald "$@"
            ;;
        fM2KhAo1Ko0Pk)
            rm_deps
            ;;
        29UtiseMD5Vji)
            deduplicate_boot_files
            ;;
        QUd1eE2e8cEdn)
            update_ald "${2-}"
            ;;
        QjPZu7VH36P6n)
            update_bootloader "$@"
            ;;
        diff)
            show_updates "${2-}" "${3-}"
            ;;
        status)
            print_status
            ;;
        help)
            print_help
            ;;
        *)
            printf "\033[31;1mUnrecognized command.\nMore info:\033[0m\n\n"
            print_help
            ;;
    esac
fi

if [[ "${!RUN_CMD[*]}" != *"$1"* ]]; then exit 0; fi

(systemd-inhibit --list | grep -q ALD) && fail_ex "-1" "ALD is already running."

printf "\n"

for possible_cmd in "${!RUN_CMD[@]}"; do
    if [[ "$1" == "$possible_cmd" ]]; then
        shift
        set -e
        systemd-inhibit --what="idle:sleep:shutdown" --who="ALD" --why="Modifying/Creating deployments..." \
            "${ALD_PATH:?}/ald" "${RUN_CMD[$possible_cmd]}" "$@"
        exit 0
    fi
done
