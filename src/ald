#!/usr/bin/env bash


if systemd-inhibit --who="ald" --what="idle" sleep 0.01 &>/dev/null && [[ "$(id -u)" == "0" ]]; then
    if ! { systemd-inhibit --list | grep -q ald-rootful-ops ; }; then
        set -e
        systemd-inhibit --what="idle:sleep:shutdown" --who="ald-rootful-ops" \
            --why="Doing important stuff" -- ald "$@"
        exit 0
    fi
fi


if [[ "$*" == *"--init"* ]]; then
    declare -xgr PREFIX="${*: -1}"
else
    declare -xgr PREFIX=""
fi

declare -xgr ALD_PATH="$PREFIX/.ald"
declare -xgr CONFIG_PATH="$PREFIX${CONFIG_PATH:-/etc/ald}"


if [[ -d /usr/lib/ald ]]; then
    for func in /usr/lib/ald/*; do
        if [[ -f "$func" ]]; then
            source "$func"
        fi
    done
else
    printf "Couldn't load function definitions from /usr/lib/ald!\n" && exit 1
fi


if [[ "$(id -u)" == "0" ]]; then
    [[ ! -f "${CONFIG_PATH:?}/.ald.lock" ]] && \
        mkdir -p "$CONFIG_PATH" && touch "${CONFIG_PATH:?}/.ald.lock"

    if (infocmp 2>/dev/null | grep -q smcup) &&
        (infocmp 2>/dev/null | grep -q rmcup); then
            declare -xgr tput_support="y";
        else
            declare -xgr tput_support="n";
    fi

    if [[ "$tput_support" == "y" ]]; then
        locsync="/dev/shm/sync$$"
        echo "" > "$locsync"
        trap clean_draw EXIT
        draw_bar "$locsync" &
    fi

    exec {ALD_LOCK}<>"${CONFIG_PATH:?}/.ald.lock" || \
        { fail_ex "-1" "Couldn't set lock fd." ; }

    pprint "Acquiring lock..."
    flock -x "$ALD_LOCK"
fi


source "$CONFIG_PATH/ald-config" &>/dev/null || iprint "No config found, using defaults..."

declare -xg SOURCE_IMAGE="${SOURCE_IMAGE:-ghcr.io/nostale3210/timesinkc-main:latest}"
declare -xgr LOCAL_TAG="${LOCAL_TAG:-localhost/ald-root}"
declare -xgr BOOT_PATH="${BOOT_PATH:-/boot}"
declare -xgr EFI_PATH="${EFI_PATH:-$BOOT_PATH/efi}"
declare -xg STATE="${ALD_STATE:-keep}"
declare -xgr KEEP_DEPS="${KEEP_DEPS:-4}"


if [[ "$(id -u)" != "0" ]]; then
    case "$1" in
        help)
            print_help
            ;;
        status)
            print_status
            ;;
        diff)
            show_updates "${2-}" "${3-}"
            ;;
        *)
            printf "\033[31;1mThis program needs to be ran as root.\nMore info:\033[0m\n\n"
            print_help
            exit 1
            ;;
    esac
else
    case "$1" in
        build)
            build_image
            ;;
        pull)
            pull_image
            ;;
        swap)
            swap_deployment "${2-}"
            ;;
        dep)
            setup_dep "$@"
            ;;
        rm)
            rm_dep "${2-}"
            ;;
        init)
            init_ald "$@"
            ;;
        gc)
            rm_deps
            ;;
        dedupe)
            deduplicate_boot_files
            ;;
        self-update)
            update_ald "${2-}"
            ;;
        bootloader-update)
            update_bootloader "$@"
            ;;
        hash)
            hash_usr
            ;;
        verify)
            verify_usr "${2-}"
            ;;
        diff)
            show_updates "${2-}" "${3-}"
            ;;
        status)
            print_status
            ;;
        help)
            print_help
            ;;
        *)
            printf "\033[31;1mUnrecognized command.\nMore info:\033[0m\n\n"
            print_help
            ;;
    esac
fi
